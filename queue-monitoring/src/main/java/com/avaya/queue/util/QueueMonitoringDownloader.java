package com.avaya.queue.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.HttpsURLConnection;

import org.apache.log4j.Logger;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import com.avaya.queue.entity.SR;
import com.avaya.queue.security.PKIXAuthenticator;

public class QueueMonitoringDownloader {
	private final static Logger logger = Logger.getLogger(QueueMonitoringDownloader.class);

	private List<SR> getList(String spanId, List<SR> queueList) {
		File input = new File(Constants.QUEUE_FILE);
		SR sr = null;
		try {
			Document doc = null;
			try {
				doc = Jsoup.parse(input, "UTF-8");
			} catch (FileNotFoundException e) {
				input = new File(Constants.PROJECT_PATH + "res" + File.separator + "queue.html");
				doc = Jsoup.parse(input, "UTF-8");
			}
			// Strip the table from the page
			Element table = doc.select("table[class=tableBorder]").get(spanId.equals(Constants.ID_OPEN_SRS) ? 1 : 2);// Open
			// SRs
			// Table
			// Strip the rows from the table
			Elements tbRows = table.select("tr");

			int i = 2;//Skips Table's header
			while (i < tbRows.size()) {
				Element row = tbRows.get(i);
				if (row.id().isEmpty() && !row.hasAttr("class")) {
					// Elements tbCol = row.select("td");
					Elements tds = row.select("td");
					// for (Element column : tbCol) {
					// if (!column.text().isEmpty()) {
					// System.out.println(column.text());
					// }
					// }
					sr = new SR();
					if (spanId.equals(Constants.ID_OPEN_SRS)) {// Open
						// SRS
						sr.setNumber(tds.get(1).text());
						sr.setSev(tds.get(2).text());
						sr.setType(tds.get(3).text());
						sr.setStatus(tds.get(4).text());
						sr.setAge(tds.get(5).text());
						sr.setTscs(tds.get(6).text());
						sr.setNcs(tds.get(7).text());
						sr.setBacklogState(tds.get(11).text());
						sr.setMea(tds.get(12).text().equals("N") ? false : true);
						sr.setDispOrPart(tds.get(13).text().equals("N") ? false : true);
						sr.setProductSkill(tds.get(14).text());
						String fl = tds.get(15).text();
						if (!fl.isEmpty()) {
							fl = fl.replaceFirst("^0+(?!$)", "");
							fl = fl.trim();
						}
						sr.setFl(fl);
						sr.setFlName(tds.get(16).text());
						sr.setCountry(tds.get(17).text());
						sr.setOtherSrs(Integer.valueOf(tds.get(18).text()));
					} else {// Open Collaborations
						sr.setNumber(tds.get(0).text());
						sr.setSev(tds.get(1).text());
						sr.setMea(tds.get(2).text().equals("N") ? false : true);
						sr.setType(tds.get(4).text());
						sr.setStatus(tds.get(5).text());
						sr.setAge(tds.get(6).text());
						sr.setBacklogState(tds.get(8).text());
						sr.setProductSkill(tds.get(9).text());
						String fl = tds.get(10).text();
						if (!fl.isEmpty()) {
							fl = fl.replaceFirst("^0+(?!$)", "");
							fl = fl.trim();
						}
						sr.setFl(fl);
						sr.setFlName(tds.get(11).text());
						sr.setCountry(tds.get(12).text());
					}
					queueList.add(sr);
					i++;
				} else {
					i += 3;
				}

			}
		} catch (IOException e) {
			e.printStackTrace();
			logger.error(e);
		}
		
		return queueList;
	}

//	private List<SR> getList(String spanId, List<SR> queueList) {
//		File input = new File(Constants.QUEUE_FILE);
//		boolean isGetContent = false;
//		SR sr = null;
//		try {
//			Document doc = null;
//			try {
//				doc = Jsoup.parse(input, "UTF-8");
//			} catch (FileNotFoundException e) {
//				input = new File(Constants.PROJECT_PATH + "res" + File.separator + "queue.html");
//				doc = Jsoup.parse(input, "UTF-8");
//			}
//			Element e = doc.getElementById(spanId);
//			Node n = e.parentNode();
//
//			for (Node childNode : n.childNodes()) {
//				if (childNode instanceof Element) {
//					Element elementNode = (Element) childNode;
//					if (elementNode.tagName().equals("table")) {
//						isGetContent = false;
//						if (logger.isDebugEnabled()) {
//							logger.debug("Open SRs Table:\n");
//						}
//
//						if (logger.isDebugEnabled()) {
//							logger.debug(elementNode.toString());
//						}
//
//						outer: {
//							for (Element row : elementNode.select("tr")) {
//								if (logger.isDebugEnabled()) {
//									logger.debug(row.toString());
//								}
//								Elements tds = row.select("td");
//
//								for (int i = 0; i < tds.size(); i++) {
//									if (isGetContent) {
//										if (!tds.toString().contains("</table>")
//												&& !tds.toString().contains("Generated By")) {
//											sr = new SR();
//											if (spanId.equals(Constants.ID_OPEN_SRS)) {// Open
//																						// SRS
//												sr.setNumber(tds.get(1).text());
//												sr.setSev(tds.get(2).text());
//												sr.setType(tds.get(3).text());
//												sr.setStatus(tds.get(4).text());
//												sr.setAge(tds.get(5).text());
//												sr.setTscs(tds.get(6).text());
//												sr.setNcs(tds.get(7).text());
//												sr.setBacklogState(tds.get(11).text());
//												sr.setMea(tds.get(12).text().equals("N") ? false : true);
//												sr.setDispOrPart(tds.get(13).text().equals("N") ? false : true);
//												sr.setProductSkill(tds.get(14).text());
//												String fl = tds.get(15).text();
//												if (!fl.isEmpty()) {
//													fl = fl.replaceFirst("^0+(?!$)", "");
//													fl = fl.trim();
//												}
//												sr.setFl(fl);
//												sr.setFlName(tds.get(16).text());
//												sr.setCountry(tds.get(17).text());
//												sr.setOtherSrs(Integer.valueOf(tds.get(18).text()));
//											} else {// Open Collaborations
//												sr.setNumber(tds.get(0).text());
//												sr.setSev(tds.get(1).text());
//												sr.setMea(tds.get(2).text().equals("N") ? false : true);
//												sr.setType(tds.get(4).text());
//												sr.setStatus(tds.get(5).text());
//												sr.setAge(tds.get(6).text());
//												sr.setBacklogState(tds.get(8).text());
//												sr.setProductSkill(tds.get(9).text());
//												String fl = tds.get(10).text();
//												if (!fl.isEmpty()) {
//													fl = fl.replaceFirst("^0+(?!$)", "");
//													fl = fl.trim();
//												}
//												sr.setFl(fl);
//												sr.setFlName(tds.get(11).text());
//												sr.setCountry(tds.get(12).text());
//											}
//											queueList.add(sr);
//										} else {
//											break outer;
//										}
//										break;
//									} else {
//										if (tds.get(i).text().equals("Manager")) {
//											isGetContent = true;
//										}
//									}
//
//								}
//							}
//
//						}
//
//					}
//				}
//			}
//
//			if (logger.isDebugEnabled()) {
//				logger.debug("END PROCESS FILE");
//			}
//
//		} catch (IOException e) {
//			e.printStackTrace();
//			logger.error(e);
//		}
//		return queueList;
//	}

	public List<SR> getQueueList() {
		List<SR> queueList = new ArrayList<SR>();
		this.getList(Constants.ID_OPEN_SRS, queueList);
		this.getList(Constants.ID_OPEN_ACTS, queueList);
		return queueList;
	}

	public void readUrl() {
		URL url;

		try {
			url = new URL(Constants.QUEUE_MONITORING_URL);
			PKIXAuthenticator.authenticate();
			HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
			System.setProperty("http.maxRedirects", "100");
			conn.setReadTimeout(5000);

			// open the stream and put it into BufferedReader
			BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));

			String inputLine;
			File file = null;

			try {
				// save to this filename
				file = new File(Constants.QUEUE_FILE);

				if (!file.exists()) {
					file.createNewFile();
				}

			} catch (IOException ioe) {
				file = new File(Constants.PROJECT_PATH + "res" + File.separator + "queue.html");
				if (!file.exists()) {
					file.createNewFile();
				}
			}

			// use FileWriter to write file
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);

			while ((inputLine = br.readLine()) != null) {
				bw.write(inputLine + "\n");
			}

			bw.close();
			br.close();
		} catch (MalformedURLException e) {
			e.printStackTrace();
			logger.error(e);
		} catch (IOException e) {
			e.printStackTrace();
			logger.error(e);
		}

	}

}